/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RpcService_TYPES_H
#define RpcService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace jsbn { namespace rpc { namespace bc {

struct CityID {
  enum type {
    CID_INIT = -1,
    CID_CQ = 0,
    CID_CD = 1,
    CID_HZ = 2
  };
};

extern const std::map<int, const char*> _CityID_VALUES_TO_NAMES;

typedef std::vector<class UserInfo>  UserInfoList;

class UserInfo;

class UserInfoSearchResult;

class Unavailable;

typedef struct _UserInfo__isset {
  _UserInfo__isset() : cityID(true), language(true) {}
  bool cityID :1;
  bool language :1;
} _UserInfo__isset;

class UserInfo {
 public:

  UserInfo(const UserInfo&);
  UserInfo& operator=(const UserInfo&);
  UserInfo() : userId(0), userName(), text(), cityID((CityID::type)-1), language("english") {
    cityID = (CityID::type)-1;

  }

  virtual ~UserInfo() throw();
  int32_t userId;
  std::string userName;
  std::string text;
  CityID::type cityID;
  std::string language;

  _UserInfo__isset __isset;

  void __set_userId(const int32_t val);

  void __set_userName(const std::string& val);

  void __set_text(const std::string& val);

  void __set_cityID(const CityID::type val);

  void __set_language(const std::string& val);

  bool operator == (const UserInfo & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(text == rhs.text))
      return false;
    if (__isset.cityID != rhs.__isset.cityID)
      return false;
    else if (__isset.cityID && !(cityID == rhs.cityID))
      return false;
    if (__isset.language != rhs.__isset.language)
      return false;
    else if (__isset.language && !(language == rhs.language))
      return false;
    return true;
  }
  bool operator != (const UserInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserInfo &a, UserInfo &b);

inline std::ostream& operator<<(std::ostream& out, const UserInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UserInfoSearchResult__isset {
  _UserInfoSearchResult__isset() : userinfos(false) {}
  bool userinfos :1;
} _UserInfoSearchResult__isset;

class UserInfoSearchResult {
 public:

  UserInfoSearchResult(const UserInfoSearchResult&);
  UserInfoSearchResult& operator=(const UserInfoSearchResult&);
  UserInfoSearchResult() {
  }

  virtual ~UserInfoSearchResult() throw();
  UserInfoList userinfos;

  _UserInfoSearchResult__isset __isset;

  void __set_userinfos(const UserInfoList& val);

  bool operator == (const UserInfoSearchResult & rhs) const
  {
    if (!(userinfos == rhs.userinfos))
      return false;
    return true;
  }
  bool operator != (const UserInfoSearchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserInfoSearchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserInfoSearchResult &a, UserInfoSearchResult &b);

inline std::ostream& operator<<(std::ostream& out, const UserInfoSearchResult& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Unavailable__isset {
  _Unavailable__isset() : message(false) {}
  bool message :1;
} _Unavailable__isset;

class Unavailable : public ::apache::thrift::TException {
 public:

  Unavailable(const Unavailable&);
  Unavailable& operator=(const Unavailable&);
  Unavailable() : message() {
  }

  virtual ~Unavailable() throw();
  std::string message;

  _Unavailable__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const Unavailable & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Unavailable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Unavailable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(Unavailable &a, Unavailable &b);

inline std::ostream& operator<<(std::ostream& out, const Unavailable& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
