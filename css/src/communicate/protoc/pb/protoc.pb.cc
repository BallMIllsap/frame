// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protoc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace jsbn {
namespace protoc {

void protobuf_ShutdownFile_protoc_2eproto() {
  delete RegisterReq::default_instance_;
  delete RegisterRsp::default_instance_;
  delete DataRelay::default_instance_;
  delete NetProtocol::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_protoc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_protoc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RegisterReq::default_instance_ = new RegisterReq();
  RegisterRsp::default_instance_ = new RegisterRsp();
  DataRelay::default_instance_ = new DataRelay();
  NetProtocol::default_instance_ = new NetProtocol();
  RegisterReq::default_instance_->InitAsDefaultInstance();
  RegisterRsp::default_instance_->InitAsDefaultInstance();
  DataRelay::default_instance_->InitAsDefaultInstance();
  NetProtocol::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protoc_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_protoc_2eproto_once_);
void protobuf_AddDesc_protoc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_protoc_2eproto_once_,
                 &protobuf_AddDesc_protoc_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protoc_2eproto {
  StaticDescriptorInitializer_protoc_2eproto() {
    protobuf_AddDesc_protoc_2eproto();
  }
} static_descriptor_initializer_protoc_2eproto_;
#endif
bool CityID_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool ServiceTpye_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool CommandID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 65537:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterReq::kCityIDFieldNumber;
#endif  // !_MSC_VER

RegisterReq::RegisterReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jsbn.protoc.RegisterReq)
}

void RegisterReq::InitAsDefaultInstance() {
}

RegisterReq::RegisterReq(const RegisterReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:jsbn.protoc.RegisterReq)
}

void RegisterReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterReq::~RegisterReq() {
  // @@protoc_insertion_point(destructor:jsbn.protoc.RegisterReq)
  SharedDtor();
}

void RegisterReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegisterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegisterReq& RegisterReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protoc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protoc_2eproto();
#endif
  return *default_instance_;
}

RegisterReq* RegisterReq::default_instance_ = NULL;

RegisterReq* RegisterReq::New() const {
  return new RegisterReq;
}

void RegisterReq::Clear() {
  cityid_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RegisterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:jsbn.protoc.RegisterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .jsbn.protoc.CityID cityID = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jsbn::protoc::CityID_IsValid(value)) {
            set_cityid(static_cast< ::jsbn::protoc::CityID >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jsbn.protoc.RegisterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jsbn.protoc.RegisterReq)
  return false;
#undef DO_
}

void RegisterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jsbn.protoc.RegisterReq)
  // required .jsbn.protoc.CityID cityID = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cityid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:jsbn.protoc.RegisterReq)
}

int RegisterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .jsbn.protoc.CityID cityID = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cityid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegisterReq*>(&from));
}

void RegisterReq::MergeFrom(const RegisterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RegisterReq::CopyFrom(const RegisterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegisterReq::Swap(RegisterReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegisterReq::GetTypeName() const {
  return "jsbn.protoc.RegisterReq";
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRsp::kResultFieldNumber;
const int RegisterRsp::kErrorDescriptionFieldNumber;
#endif  // !_MSC_VER

RegisterRsp::RegisterRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jsbn.protoc.RegisterRsp)
}

void RegisterRsp::InitAsDefaultInstance() {
}

RegisterRsp::RegisterRsp(const RegisterRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:jsbn.protoc.RegisterRsp)
}

void RegisterRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0u;
  error_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRsp::~RegisterRsp() {
  // @@protoc_insertion_point(destructor:jsbn.protoc.RegisterRsp)
  SharedDtor();
}

void RegisterRsp::SharedDtor() {
  if (error_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_description_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegisterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegisterRsp& RegisterRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protoc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protoc_2eproto();
#endif
  return *default_instance_;
}

RegisterRsp* RegisterRsp::default_instance_ = NULL;

RegisterRsp* RegisterRsp::New() const {
  return new RegisterRsp;
}

void RegisterRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 0u;
    if (has_error_description()) {
      if (error_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool RegisterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:jsbn.protoc.RegisterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 result = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_description;
        break;
      }

      // optional string error_description = 2;
      case 2: {
        if (tag == 18) {
         parse_error_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jsbn.protoc.RegisterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jsbn.protoc.RegisterRsp)
  return false;
#undef DO_
}

void RegisterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jsbn.protoc.RegisterRsp)
  // required fixed32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->result(), output);
  }

  // optional string error_description = 2;
  if (has_error_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_description(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:jsbn.protoc.RegisterRsp)
}

int RegisterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 result = 1;
    if (has_result()) {
      total_size += 1 + 4;
    }

    // optional string error_description = 2;
    if (has_error_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_description());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegisterRsp*>(&from));
}

void RegisterRsp::MergeFrom(const RegisterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_error_description()) {
      set_error_description(from.error_description());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RegisterRsp::CopyFrom(const RegisterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegisterRsp::Swap(RegisterRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_description_, other->error_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegisterRsp::GetTypeName() const {
  return "jsbn.protoc.RegisterRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int DataRelay::kDstSrvTypeFieldNumber;
const int DataRelay::kCityIDFieldNumber;
const int DataRelay::kRelayMsgFieldNumber;
#endif  // !_MSC_VER

DataRelay::DataRelay()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jsbn.protoc.DataRelay)
}

void DataRelay::InitAsDefaultInstance() {
}

DataRelay::DataRelay(const DataRelay& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:jsbn.protoc.DataRelay)
}

void DataRelay::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dstsrvtype_ = -1;
  cityid_ = -1;
  relaymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataRelay::~DataRelay() {
  // @@protoc_insertion_point(destructor:jsbn.protoc.DataRelay)
  SharedDtor();
}

void DataRelay::SharedDtor() {
  if (relaymsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relaymsg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataRelay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataRelay& DataRelay::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protoc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protoc_2eproto();
#endif
  return *default_instance_;
}

DataRelay* DataRelay::default_instance_ = NULL;

DataRelay* DataRelay::New() const {
  return new DataRelay;
}

void DataRelay::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    dstsrvtype_ = -1;
    cityid_ = -1;
    if (has_relaymsg()) {
      if (relaymsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        relaymsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DataRelay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:jsbn.protoc.DataRelay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .jsbn.protoc.ServiceTpye dstSrvType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jsbn::protoc::ServiceTpye_IsValid(value)) {
            set_dstsrvtype(static_cast< ::jsbn::protoc::ServiceTpye >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cityID;
        break;
      }

      // optional .jsbn.protoc.CityID cityID = 2;
      case 2: {
        if (tag == 16) {
         parse_cityID:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jsbn::protoc::CityID_IsValid(value)) {
            set_cityid(static_cast< ::jsbn::protoc::CityID >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_relayMsg;
        break;
      }

      // required string relayMsg = 3;
      case 3: {
        if (tag == 26) {
         parse_relayMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relaymsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jsbn.protoc.DataRelay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jsbn.protoc.DataRelay)
  return false;
#undef DO_
}

void DataRelay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jsbn.protoc.DataRelay)
  // required .jsbn.protoc.ServiceTpye dstSrvType = 1;
  if (has_dstsrvtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dstsrvtype(), output);
  }

  // optional .jsbn.protoc.CityID cityID = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cityid(), output);
  }

  // required string relayMsg = 3;
  if (has_relaymsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->relaymsg(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:jsbn.protoc.DataRelay)
}

int DataRelay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .jsbn.protoc.ServiceTpye dstSrvType = 1;
    if (has_dstsrvtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dstsrvtype());
    }

    // optional .jsbn.protoc.CityID cityID = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cityid());
    }

    // required string relayMsg = 3;
    if (has_relaymsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relaymsg());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataRelay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DataRelay*>(&from));
}

void DataRelay::MergeFrom(const DataRelay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dstsrvtype()) {
      set_dstsrvtype(from.dstsrvtype());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_relaymsg()) {
      set_relaymsg(from.relaymsg());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataRelay::CopyFrom(const DataRelay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRelay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void DataRelay::Swap(DataRelay* other) {
  if (other != this) {
    std::swap(dstsrvtype_, other->dstsrvtype_);
    std::swap(cityid_, other->cityid_);
    std::swap(relaymsg_, other->relaymsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DataRelay::GetTypeName() const {
  return "jsbn.protoc.DataRelay";
}


// ===================================================================

#ifndef _MSC_VER
const int NetProtocol::kSeqFieldNumber;
const int NetProtocol::kCommandIDFieldNumber;
const int NetProtocol::kRegisterReqFieldNumber;
const int NetProtocol::kRegisterRspFieldNumber;
const int NetProtocol::kDataRelayFieldNumber;
#endif  // !_MSC_VER

NetProtocol::NetProtocol()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:jsbn.protoc.NetProtocol)
}

void NetProtocol::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  registerreq_ = const_cast< ::jsbn::protoc::RegisterReq*>(
      ::jsbn::protoc::RegisterReq::internal_default_instance());
#else
  registerreq_ = const_cast< ::jsbn::protoc::RegisterReq*>(&::jsbn::protoc::RegisterReq::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  registerrsp_ = const_cast< ::jsbn::protoc::RegisterRsp*>(
      ::jsbn::protoc::RegisterRsp::internal_default_instance());
#else
  registerrsp_ = const_cast< ::jsbn::protoc::RegisterRsp*>(&::jsbn::protoc::RegisterRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  datarelay_ = const_cast< ::jsbn::protoc::DataRelay*>(
      ::jsbn::protoc::DataRelay::internal_default_instance());
#else
  datarelay_ = const_cast< ::jsbn::protoc::DataRelay*>(&::jsbn::protoc::DataRelay::default_instance());
#endif
}

NetProtocol::NetProtocol(const NetProtocol& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:jsbn.protoc.NetProtocol)
}

void NetProtocol::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0u;
  commandid_ = 0;
  registerreq_ = NULL;
  registerrsp_ = NULL;
  datarelay_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetProtocol::~NetProtocol() {
  // @@protoc_insertion_point(destructor:jsbn.protoc.NetProtocol)
  SharedDtor();
}

void NetProtocol::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete registerreq_;
    delete registerrsp_;
    delete datarelay_;
  }
}

void NetProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetProtocol& NetProtocol::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protoc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protoc_2eproto();
#endif
  return *default_instance_;
}

NetProtocol* NetProtocol::default_instance_ = NULL;

NetProtocol* NetProtocol::New() const {
  return new NetProtocol;
}

void NetProtocol::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetProtocol*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(seq_, commandid_);
    if (has_registerreq()) {
      if (registerreq_ != NULL) registerreq_->::jsbn::protoc::RegisterReq::Clear();
    }
    if (has_registerrsp()) {
      if (registerrsp_ != NULL) registerrsp_->::jsbn::protoc::RegisterRsp::Clear();
    }
    if (has_datarelay()) {
      if (datarelay_ != NULL) datarelay_->::jsbn::protoc::DataRelay::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NetProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:jsbn.protoc.NetProtocol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 seq = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commandID;
        break;
      }

      // required .jsbn.protoc.CommandID commandID = 2;
      case 2: {
        if (tag == 16) {
         parse_commandID:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jsbn::protoc::CommandID_IsValid(value)) {
            set_commandid(static_cast< ::jsbn::protoc::CommandID >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_registerReq;
        break;
      }

      // optional .jsbn.protoc.RegisterReq registerReq = 3;
      case 3: {
        if (tag == 26) {
         parse_registerReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_registerRsp;
        break;
      }

      // optional .jsbn.protoc.RegisterRsp registerRsp = 4;
      case 4: {
        if (tag == 34) {
         parse_registerRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registerrsp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dataRelay;
        break;
      }

      // optional .jsbn.protoc.DataRelay dataRelay = 5;
      case 5: {
        if (tag == 42) {
         parse_dataRelay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datarelay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jsbn.protoc.NetProtocol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jsbn.protoc.NetProtocol)
  return false;
#undef DO_
}

void NetProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jsbn.protoc.NetProtocol)
  // optional fixed32 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->seq(), output);
  }

  // required .jsbn.protoc.CommandID commandID = 2;
  if (has_commandid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->commandid(), output);
  }

  // optional .jsbn.protoc.RegisterReq registerReq = 3;
  if (has_registerreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->registerreq(), output);
  }

  // optional .jsbn.protoc.RegisterRsp registerRsp = 4;
  if (has_registerrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->registerrsp(), output);
  }

  // optional .jsbn.protoc.DataRelay dataRelay = 5;
  if (has_datarelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->datarelay(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:jsbn.protoc.NetProtocol)
}

int NetProtocol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 seq = 1;
    if (has_seq()) {
      total_size += 1 + 4;
    }

    // required .jsbn.protoc.CommandID commandID = 2;
    if (has_commandid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commandid());
    }

    // optional .jsbn.protoc.RegisterReq registerReq = 3;
    if (has_registerreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerreq());
    }

    // optional .jsbn.protoc.RegisterRsp registerRsp = 4;
    if (has_registerrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registerrsp());
    }

    // optional .jsbn.protoc.DataRelay dataRelay = 5;
    if (has_datarelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datarelay());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetProtocol::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetProtocol*>(&from));
}

void NetProtocol::MergeFrom(const NetProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_commandid()) {
      set_commandid(from.commandid());
    }
    if (from.has_registerreq()) {
      mutable_registerreq()->::jsbn::protoc::RegisterReq::MergeFrom(from.registerreq());
    }
    if (from.has_registerrsp()) {
      mutable_registerrsp()->::jsbn::protoc::RegisterRsp::MergeFrom(from.registerrsp());
    }
    if (from.has_datarelay()) {
      mutable_datarelay()->::jsbn::protoc::DataRelay::MergeFrom(from.datarelay());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NetProtocol::CopyFrom(const NetProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_registerreq()) {
    if (!this->registerreq().IsInitialized()) return false;
  }
  if (has_registerrsp()) {
    if (!this->registerrsp().IsInitialized()) return false;
  }
  if (has_datarelay()) {
    if (!this->datarelay().IsInitialized()) return false;
  }
  return true;
}

void NetProtocol::Swap(NetProtocol* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(commandid_, other->commandid_);
    std::swap(registerreq_, other->registerreq_);
    std::swap(registerrsp_, other->registerrsp_);
    std::swap(datarelay_, other->datarelay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NetProtocol::GetTypeName() const {
  return "jsbn.protoc.NetProtocol";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoc
}  // namespace jsbn

// @@protoc_insertion_point(global_scope)
