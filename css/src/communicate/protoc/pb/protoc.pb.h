// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoc.proto

#ifndef PROTOBUF_protoc_2eproto__INCLUDED
#define PROTOBUF_protoc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace jsbn {
namespace protoc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protoc_2eproto();
void protobuf_AssignDesc_protoc_2eproto();
void protobuf_ShutdownFile_protoc_2eproto();

class RegisterReq;
class RegisterRsp;
class RelayReq;
class RelayRsp;
class NetProtocol;

enum CityID {
  CID_INIT = -1,
  CID_CQ = 0,
  CID_CD = 1,
  CID_HZ = 2
};
bool CityID_IsValid(int value);
const CityID CityID_MIN = CID_INIT;
const CityID CityID_MAX = CID_HZ;
const int CityID_ARRAYSIZE = CityID_MAX + 1;

enum ServiceTpye {
  ST_INIT = -1,
  ST_CSS = 0,
  ST_BSS = 1,
  ST_SMS = 2,
  ST_CMS = 3
};
bool ServiceTpye_IsValid(int value);
const ServiceTpye ServiceTpye_MIN = ST_INIT;
const ServiceTpye ServiceTpye_MAX = ST_CMS;
const int ServiceTpye_ARRAYSIZE = ServiceTpye_MAX + 1;

enum CommandID {
  Heart_Beat = 0,
  Register_Req = 1,
  Register_Rsp = 65537,
  Relay_Req = 2,
  Relay_Rsp = 65538
};
bool CommandID_IsValid(int value);
const CommandID CommandID_MIN = Heart_Beat;
const CommandID CommandID_MAX = Relay_Rsp;
const int CommandID_ARRAYSIZE = CommandID_MAX + 1;

// ===================================================================

class RegisterReq : public ::google::protobuf::MessageLite {
 public:
  RegisterReq();
  virtual ~RegisterReq();

  RegisterReq(const RegisterReq& from);

  inline RegisterReq& operator=(const RegisterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RegisterReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RegisterReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RegisterReq* other);

  // implements Message ----------------------------------------------

  RegisterReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RegisterReq& from);
  void MergeFrom(const RegisterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .jsbn.protoc.CityID cityID = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 1;
  inline ::jsbn::protoc::CityID cityid() const;
  inline void set_cityid(::jsbn::protoc::CityID value);

  // @@protoc_insertion_point(class_scope:jsbn.protoc.RegisterReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cityid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_protoc_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_protoc_2eproto();
  #endif
  friend void protobuf_AssignDesc_protoc_2eproto();
  friend void protobuf_ShutdownFile_protoc_2eproto();

  void InitAsDefaultInstance();
  static RegisterReq* default_instance_;
};
// -------------------------------------------------------------------

class RegisterRsp : public ::google::protobuf::MessageLite {
 public:
  RegisterRsp();
  virtual ~RegisterRsp();

  RegisterRsp(const RegisterRsp& from);

  inline RegisterRsp& operator=(const RegisterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RegisterRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RegisterRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RegisterRsp* other);

  // implements Message ----------------------------------------------

  RegisterRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RegisterRsp& from);
  void MergeFrom(const RegisterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional string error_description = 2;
  inline bool has_error_description() const;
  inline void clear_error_description();
  static const int kErrorDescriptionFieldNumber = 2;
  inline const ::std::string& error_description() const;
  inline void set_error_description(const ::std::string& value);
  inline void set_error_description(const char* value);
  inline void set_error_description(const char* value, size_t size);
  inline ::std::string* mutable_error_description();
  inline ::std::string* release_error_description();
  inline void set_allocated_error_description(::std::string* error_description);

  // @@protoc_insertion_point(class_scope:jsbn.protoc.RegisterRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_error_description();
  inline void clear_has_error_description();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* error_description_;
  ::google::protobuf::uint32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_protoc_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_protoc_2eproto();
  #endif
  friend void protobuf_AssignDesc_protoc_2eproto();
  friend void protobuf_ShutdownFile_protoc_2eproto();

  void InitAsDefaultInstance();
  static RegisterRsp* default_instance_;
};
// -------------------------------------------------------------------

class RelayReq : public ::google::protobuf::MessageLite {
 public:
  RelayReq();
  virtual ~RelayReq();

  RelayReq(const RelayReq& from);

  inline RelayReq& operator=(const RelayReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RelayReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RelayReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RelayReq* other);

  // implements Message ----------------------------------------------

  RelayReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RelayReq& from);
  void MergeFrom(const RelayReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .jsbn.protoc.ServiceTpye dstSrvType = 1;
  inline bool has_dstsrvtype() const;
  inline void clear_dstsrvtype();
  static const int kDstSrvTypeFieldNumber = 1;
  inline ::jsbn::protoc::ServiceTpye dstsrvtype() const;
  inline void set_dstsrvtype(::jsbn::protoc::ServiceTpye value);

  // optional .jsbn.protoc.CityID cityID = 2;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 2;
  inline ::jsbn::protoc::CityID cityid() const;
  inline void set_cityid(::jsbn::protoc::CityID value);

  // required string relayMsg = 3;
  inline bool has_relaymsg() const;
  inline void clear_relaymsg();
  static const int kRelayMsgFieldNumber = 3;
  inline const ::std::string& relaymsg() const;
  inline void set_relaymsg(const ::std::string& value);
  inline void set_relaymsg(const char* value);
  inline void set_relaymsg(const char* value, size_t size);
  inline ::std::string* mutable_relaymsg();
  inline ::std::string* release_relaymsg();
  inline void set_allocated_relaymsg(::std::string* relaymsg);

  // @@protoc_insertion_point(class_scope:jsbn.protoc.RelayReq)
 private:
  inline void set_has_dstsrvtype();
  inline void clear_has_dstsrvtype();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_relaymsg();
  inline void clear_has_relaymsg();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int dstsrvtype_;
  int cityid_;
  ::std::string* relaymsg_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_protoc_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_protoc_2eproto();
  #endif
  friend void protobuf_AssignDesc_protoc_2eproto();
  friend void protobuf_ShutdownFile_protoc_2eproto();

  void InitAsDefaultInstance();
  static RelayReq* default_instance_;
};
// -------------------------------------------------------------------

class RelayRsp : public ::google::protobuf::MessageLite {
 public:
  RelayRsp();
  virtual ~RelayRsp();

  RelayRsp(const RelayRsp& from);

  inline RelayRsp& operator=(const RelayRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RelayRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RelayRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RelayRsp* other);

  // implements Message ----------------------------------------------

  RelayRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RelayRsp& from);
  void MergeFrom(const RelayRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .jsbn.protoc.ServiceTpye dstSrvType = 1;
  inline bool has_dstsrvtype() const;
  inline void clear_dstsrvtype();
  static const int kDstSrvTypeFieldNumber = 1;
  inline ::jsbn::protoc::ServiceTpye dstsrvtype() const;
  inline void set_dstsrvtype(::jsbn::protoc::ServiceTpye value);

  // optional .jsbn.protoc.CityID cityID = 2;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIDFieldNumber = 2;
  inline ::jsbn::protoc::CityID cityid() const;
  inline void set_cityid(::jsbn::protoc::CityID value);

  // required fixed32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional string error_description = 4;
  inline bool has_error_description() const;
  inline void clear_error_description();
  static const int kErrorDescriptionFieldNumber = 4;
  inline const ::std::string& error_description() const;
  inline void set_error_description(const ::std::string& value);
  inline void set_error_description(const char* value);
  inline void set_error_description(const char* value, size_t size);
  inline ::std::string* mutable_error_description();
  inline ::std::string* release_error_description();
  inline void set_allocated_error_description(::std::string* error_description);

  // @@protoc_insertion_point(class_scope:jsbn.protoc.RelayRsp)
 private:
  inline void set_has_dstsrvtype();
  inline void clear_has_dstsrvtype();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_error_description();
  inline void clear_has_error_description();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int dstsrvtype_;
  int cityid_;
  ::std::string* error_description_;
  ::google::protobuf::uint32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_protoc_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_protoc_2eproto();
  #endif
  friend void protobuf_AssignDesc_protoc_2eproto();
  friend void protobuf_ShutdownFile_protoc_2eproto();

  void InitAsDefaultInstance();
  static RelayRsp* default_instance_;
};
// -------------------------------------------------------------------

class NetProtocol : public ::google::protobuf::MessageLite {
 public:
  NetProtocol();
  virtual ~NetProtocol();

  NetProtocol(const NetProtocol& from);

  inline NetProtocol& operator=(const NetProtocol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const NetProtocol& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NetProtocol* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NetProtocol* other);

  // implements Message ----------------------------------------------

  NetProtocol* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NetProtocol& from);
  void MergeFrom(const NetProtocol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 seq = 1;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 1;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);

  // required .jsbn.protoc.CommandID commandID = 2;
  inline bool has_commandid() const;
  inline void clear_commandid();
  static const int kCommandIDFieldNumber = 2;
  inline ::jsbn::protoc::CommandID commandid() const;
  inline void set_commandid(::jsbn::protoc::CommandID value);

  // optional .jsbn.protoc.RegisterReq registerReq = 3;
  inline bool has_registerreq() const;
  inline void clear_registerreq();
  static const int kRegisterReqFieldNumber = 3;
  inline const ::jsbn::protoc::RegisterReq& registerreq() const;
  inline ::jsbn::protoc::RegisterReq* mutable_registerreq();
  inline ::jsbn::protoc::RegisterReq* release_registerreq();
  inline void set_allocated_registerreq(::jsbn::protoc::RegisterReq* registerreq);

  // optional .jsbn.protoc.RegisterRsp registerRsp = 4;
  inline bool has_registerrsp() const;
  inline void clear_registerrsp();
  static const int kRegisterRspFieldNumber = 4;
  inline const ::jsbn::protoc::RegisterRsp& registerrsp() const;
  inline ::jsbn::protoc::RegisterRsp* mutable_registerrsp();
  inline ::jsbn::protoc::RegisterRsp* release_registerrsp();
  inline void set_allocated_registerrsp(::jsbn::protoc::RegisterRsp* registerrsp);

  // optional .jsbn.protoc.RelayReq relayReq = 5;
  inline bool has_relayreq() const;
  inline void clear_relayreq();
  static const int kRelayReqFieldNumber = 5;
  inline const ::jsbn::protoc::RelayReq& relayreq() const;
  inline ::jsbn::protoc::RelayReq* mutable_relayreq();
  inline ::jsbn::protoc::RelayReq* release_relayreq();
  inline void set_allocated_relayreq(::jsbn::protoc::RelayReq* relayreq);

  // optional .jsbn.protoc.RelayRsp relayRsp = 6;
  inline bool has_relayrsp() const;
  inline void clear_relayrsp();
  static const int kRelayRspFieldNumber = 6;
  inline const ::jsbn::protoc::RelayRsp& relayrsp() const;
  inline ::jsbn::protoc::RelayRsp* mutable_relayrsp();
  inline ::jsbn::protoc::RelayRsp* release_relayrsp();
  inline void set_allocated_relayrsp(::jsbn::protoc::RelayRsp* relayrsp);

  // @@protoc_insertion_point(class_scope:jsbn.protoc.NetProtocol)
 private:
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_commandid();
  inline void clear_has_commandid();
  inline void set_has_registerreq();
  inline void clear_has_registerreq();
  inline void set_has_registerrsp();
  inline void clear_has_registerrsp();
  inline void set_has_relayreq();
  inline void clear_has_relayreq();
  inline void set_has_relayrsp();
  inline void clear_has_relayrsp();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 seq_;
  int commandid_;
  ::jsbn::protoc::RegisterReq* registerreq_;
  ::jsbn::protoc::RegisterRsp* registerrsp_;
  ::jsbn::protoc::RelayReq* relayreq_;
  ::jsbn::protoc::RelayRsp* relayrsp_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_protoc_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_protoc_2eproto();
  #endif
  friend void protobuf_AssignDesc_protoc_2eproto();
  friend void protobuf_ShutdownFile_protoc_2eproto();

  void InitAsDefaultInstance();
  static NetProtocol* default_instance_;
};
// ===================================================================


// ===================================================================

// RegisterReq

// required .jsbn.protoc.CityID cityID = 1;
inline bool RegisterReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterReq::clear_cityid() {
  cityid_ = -1;
  clear_has_cityid();
}
inline ::jsbn::protoc::CityID RegisterReq::cityid() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.RegisterReq.cityID)
  return static_cast< ::jsbn::protoc::CityID >(cityid_);
}
inline void RegisterReq::set_cityid(::jsbn::protoc::CityID value) {
  assert(::jsbn::protoc::CityID_IsValid(value));
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:jsbn.protoc.RegisterReq.cityID)
}

// -------------------------------------------------------------------

// RegisterRsp

// required fixed32 result = 1;
inline bool RegisterRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterRsp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 RegisterRsp::result() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.RegisterRsp.result)
  return result_;
}
inline void RegisterRsp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:jsbn.protoc.RegisterRsp.result)
}

// optional string error_description = 2;
inline bool RegisterRsp::has_error_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterRsp::set_has_error_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterRsp::clear_has_error_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterRsp::clear_error_description() {
  if (error_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_description_->clear();
  }
  clear_has_error_description();
}
inline const ::std::string& RegisterRsp::error_description() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.RegisterRsp.error_description)
  return *error_description_;
}
inline void RegisterRsp::set_error_description(const ::std::string& value) {
  set_has_error_description();
  if (error_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_description_ = new ::std::string;
  }
  error_description_->assign(value);
  // @@protoc_insertion_point(field_set:jsbn.protoc.RegisterRsp.error_description)
}
inline void RegisterRsp::set_error_description(const char* value) {
  set_has_error_description();
  if (error_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_description_ = new ::std::string;
  }
  error_description_->assign(value);
  // @@protoc_insertion_point(field_set_char:jsbn.protoc.RegisterRsp.error_description)
}
inline void RegisterRsp::set_error_description(const char* value, size_t size) {
  set_has_error_description();
  if (error_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_description_ = new ::std::string;
  }
  error_description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jsbn.protoc.RegisterRsp.error_description)
}
inline ::std::string* RegisterRsp::mutable_error_description() {
  set_has_error_description();
  if (error_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:jsbn.protoc.RegisterRsp.error_description)
  return error_description_;
}
inline ::std::string* RegisterRsp::release_error_description() {
  clear_has_error_description();
  if (error_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_description_;
    error_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RegisterRsp::set_allocated_error_description(::std::string* error_description) {
  if (error_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_description_;
  }
  if (error_description) {
    set_has_error_description();
    error_description_ = error_description;
  } else {
    clear_has_error_description();
    error_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:jsbn.protoc.RegisterRsp.error_description)
}

// -------------------------------------------------------------------

// RelayReq

// required .jsbn.protoc.ServiceTpye dstSrvType = 1;
inline bool RelayReq::has_dstsrvtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelayReq::set_has_dstsrvtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelayReq::clear_has_dstsrvtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelayReq::clear_dstsrvtype() {
  dstsrvtype_ = -1;
  clear_has_dstsrvtype();
}
inline ::jsbn::protoc::ServiceTpye RelayReq::dstsrvtype() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.RelayReq.dstSrvType)
  return static_cast< ::jsbn::protoc::ServiceTpye >(dstsrvtype_);
}
inline void RelayReq::set_dstsrvtype(::jsbn::protoc::ServiceTpye value) {
  assert(::jsbn::protoc::ServiceTpye_IsValid(value));
  set_has_dstsrvtype();
  dstsrvtype_ = value;
  // @@protoc_insertion_point(field_set:jsbn.protoc.RelayReq.dstSrvType)
}

// optional .jsbn.protoc.CityID cityID = 2;
inline bool RelayReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelayReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelayReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelayReq::clear_cityid() {
  cityid_ = -1;
  clear_has_cityid();
}
inline ::jsbn::protoc::CityID RelayReq::cityid() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.RelayReq.cityID)
  return static_cast< ::jsbn::protoc::CityID >(cityid_);
}
inline void RelayReq::set_cityid(::jsbn::protoc::CityID value) {
  assert(::jsbn::protoc::CityID_IsValid(value));
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:jsbn.protoc.RelayReq.cityID)
}

// required string relayMsg = 3;
inline bool RelayReq::has_relaymsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelayReq::set_has_relaymsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelayReq::clear_has_relaymsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelayReq::clear_relaymsg() {
  if (relaymsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relaymsg_->clear();
  }
  clear_has_relaymsg();
}
inline const ::std::string& RelayReq::relaymsg() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.RelayReq.relayMsg)
  return *relaymsg_;
}
inline void RelayReq::set_relaymsg(const ::std::string& value) {
  set_has_relaymsg();
  if (relaymsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relaymsg_ = new ::std::string;
  }
  relaymsg_->assign(value);
  // @@protoc_insertion_point(field_set:jsbn.protoc.RelayReq.relayMsg)
}
inline void RelayReq::set_relaymsg(const char* value) {
  set_has_relaymsg();
  if (relaymsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relaymsg_ = new ::std::string;
  }
  relaymsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:jsbn.protoc.RelayReq.relayMsg)
}
inline void RelayReq::set_relaymsg(const char* value, size_t size) {
  set_has_relaymsg();
  if (relaymsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relaymsg_ = new ::std::string;
  }
  relaymsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jsbn.protoc.RelayReq.relayMsg)
}
inline ::std::string* RelayReq::mutable_relaymsg() {
  set_has_relaymsg();
  if (relaymsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    relaymsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:jsbn.protoc.RelayReq.relayMsg)
  return relaymsg_;
}
inline ::std::string* RelayReq::release_relaymsg() {
  clear_has_relaymsg();
  if (relaymsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = relaymsg_;
    relaymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RelayReq::set_allocated_relaymsg(::std::string* relaymsg) {
  if (relaymsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete relaymsg_;
  }
  if (relaymsg) {
    set_has_relaymsg();
    relaymsg_ = relaymsg;
  } else {
    clear_has_relaymsg();
    relaymsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:jsbn.protoc.RelayReq.relayMsg)
}

// -------------------------------------------------------------------

// RelayRsp

// required .jsbn.protoc.ServiceTpye dstSrvType = 1;
inline bool RelayRsp::has_dstsrvtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelayRsp::set_has_dstsrvtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelayRsp::clear_has_dstsrvtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelayRsp::clear_dstsrvtype() {
  dstsrvtype_ = -1;
  clear_has_dstsrvtype();
}
inline ::jsbn::protoc::ServiceTpye RelayRsp::dstsrvtype() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.RelayRsp.dstSrvType)
  return static_cast< ::jsbn::protoc::ServiceTpye >(dstsrvtype_);
}
inline void RelayRsp::set_dstsrvtype(::jsbn::protoc::ServiceTpye value) {
  assert(::jsbn::protoc::ServiceTpye_IsValid(value));
  set_has_dstsrvtype();
  dstsrvtype_ = value;
  // @@protoc_insertion_point(field_set:jsbn.protoc.RelayRsp.dstSrvType)
}

// optional .jsbn.protoc.CityID cityID = 2;
inline bool RelayRsp::has_cityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelayRsp::set_has_cityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelayRsp::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelayRsp::clear_cityid() {
  cityid_ = -1;
  clear_has_cityid();
}
inline ::jsbn::protoc::CityID RelayRsp::cityid() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.RelayRsp.cityID)
  return static_cast< ::jsbn::protoc::CityID >(cityid_);
}
inline void RelayRsp::set_cityid(::jsbn::protoc::CityID value) {
  assert(::jsbn::protoc::CityID_IsValid(value));
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:jsbn.protoc.RelayRsp.cityID)
}

// required fixed32 result = 3;
inline bool RelayRsp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelayRsp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelayRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelayRsp::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 RelayRsp::result() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.RelayRsp.result)
  return result_;
}
inline void RelayRsp::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:jsbn.protoc.RelayRsp.result)
}

// optional string error_description = 4;
inline bool RelayRsp::has_error_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelayRsp::set_has_error_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelayRsp::clear_has_error_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelayRsp::clear_error_description() {
  if (error_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_description_->clear();
  }
  clear_has_error_description();
}
inline const ::std::string& RelayRsp::error_description() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.RelayRsp.error_description)
  return *error_description_;
}
inline void RelayRsp::set_error_description(const ::std::string& value) {
  set_has_error_description();
  if (error_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_description_ = new ::std::string;
  }
  error_description_->assign(value);
  // @@protoc_insertion_point(field_set:jsbn.protoc.RelayRsp.error_description)
}
inline void RelayRsp::set_error_description(const char* value) {
  set_has_error_description();
  if (error_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_description_ = new ::std::string;
  }
  error_description_->assign(value);
  // @@protoc_insertion_point(field_set_char:jsbn.protoc.RelayRsp.error_description)
}
inline void RelayRsp::set_error_description(const char* value, size_t size) {
  set_has_error_description();
  if (error_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_description_ = new ::std::string;
  }
  error_description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jsbn.protoc.RelayRsp.error_description)
}
inline ::std::string* RelayRsp::mutable_error_description() {
  set_has_error_description();
  if (error_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:jsbn.protoc.RelayRsp.error_description)
  return error_description_;
}
inline ::std::string* RelayRsp::release_error_description() {
  clear_has_error_description();
  if (error_description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_description_;
    error_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RelayRsp::set_allocated_error_description(::std::string* error_description) {
  if (error_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_description_;
  }
  if (error_description) {
    set_has_error_description();
    error_description_ = error_description;
  } else {
    clear_has_error_description();
    error_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:jsbn.protoc.RelayRsp.error_description)
}

// -------------------------------------------------------------------

// NetProtocol

// optional fixed32 seq = 1;
inline bool NetProtocol::has_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetProtocol::set_has_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetProtocol::clear_has_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetProtocol::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 NetProtocol::seq() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.NetProtocol.seq)
  return seq_;
}
inline void NetProtocol::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:jsbn.protoc.NetProtocol.seq)
}

// required .jsbn.protoc.CommandID commandID = 2;
inline bool NetProtocol::has_commandid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetProtocol::set_has_commandid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetProtocol::clear_has_commandid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetProtocol::clear_commandid() {
  commandid_ = 0;
  clear_has_commandid();
}
inline ::jsbn::protoc::CommandID NetProtocol::commandid() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.NetProtocol.commandID)
  return static_cast< ::jsbn::protoc::CommandID >(commandid_);
}
inline void NetProtocol::set_commandid(::jsbn::protoc::CommandID value) {
  assert(::jsbn::protoc::CommandID_IsValid(value));
  set_has_commandid();
  commandid_ = value;
  // @@protoc_insertion_point(field_set:jsbn.protoc.NetProtocol.commandID)
}

// optional .jsbn.protoc.RegisterReq registerReq = 3;
inline bool NetProtocol::has_registerreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetProtocol::set_has_registerreq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetProtocol::clear_has_registerreq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetProtocol::clear_registerreq() {
  if (registerreq_ != NULL) registerreq_->::jsbn::protoc::RegisterReq::Clear();
  clear_has_registerreq();
}
inline const ::jsbn::protoc::RegisterReq& NetProtocol::registerreq() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.NetProtocol.registerReq)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return registerreq_ != NULL ? *registerreq_ : *default_instance().registerreq_;
#else
  return registerreq_ != NULL ? *registerreq_ : *default_instance_->registerreq_;
#endif
}
inline ::jsbn::protoc::RegisterReq* NetProtocol::mutable_registerreq() {
  set_has_registerreq();
  if (registerreq_ == NULL) registerreq_ = new ::jsbn::protoc::RegisterReq;
  // @@protoc_insertion_point(field_mutable:jsbn.protoc.NetProtocol.registerReq)
  return registerreq_;
}
inline ::jsbn::protoc::RegisterReq* NetProtocol::release_registerreq() {
  clear_has_registerreq();
  ::jsbn::protoc::RegisterReq* temp = registerreq_;
  registerreq_ = NULL;
  return temp;
}
inline void NetProtocol::set_allocated_registerreq(::jsbn::protoc::RegisterReq* registerreq) {
  delete registerreq_;
  registerreq_ = registerreq;
  if (registerreq) {
    set_has_registerreq();
  } else {
    clear_has_registerreq();
  }
  // @@protoc_insertion_point(field_set_allocated:jsbn.protoc.NetProtocol.registerReq)
}

// optional .jsbn.protoc.RegisterRsp registerRsp = 4;
inline bool NetProtocol::has_registerrsp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetProtocol::set_has_registerrsp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetProtocol::clear_has_registerrsp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetProtocol::clear_registerrsp() {
  if (registerrsp_ != NULL) registerrsp_->::jsbn::protoc::RegisterRsp::Clear();
  clear_has_registerrsp();
}
inline const ::jsbn::protoc::RegisterRsp& NetProtocol::registerrsp() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.NetProtocol.registerRsp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return registerrsp_ != NULL ? *registerrsp_ : *default_instance().registerrsp_;
#else
  return registerrsp_ != NULL ? *registerrsp_ : *default_instance_->registerrsp_;
#endif
}
inline ::jsbn::protoc::RegisterRsp* NetProtocol::mutable_registerrsp() {
  set_has_registerrsp();
  if (registerrsp_ == NULL) registerrsp_ = new ::jsbn::protoc::RegisterRsp;
  // @@protoc_insertion_point(field_mutable:jsbn.protoc.NetProtocol.registerRsp)
  return registerrsp_;
}
inline ::jsbn::protoc::RegisterRsp* NetProtocol::release_registerrsp() {
  clear_has_registerrsp();
  ::jsbn::protoc::RegisterRsp* temp = registerrsp_;
  registerrsp_ = NULL;
  return temp;
}
inline void NetProtocol::set_allocated_registerrsp(::jsbn::protoc::RegisterRsp* registerrsp) {
  delete registerrsp_;
  registerrsp_ = registerrsp;
  if (registerrsp) {
    set_has_registerrsp();
  } else {
    clear_has_registerrsp();
  }
  // @@protoc_insertion_point(field_set_allocated:jsbn.protoc.NetProtocol.registerRsp)
}

// optional .jsbn.protoc.RelayReq relayReq = 5;
inline bool NetProtocol::has_relayreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetProtocol::set_has_relayreq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetProtocol::clear_has_relayreq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetProtocol::clear_relayreq() {
  if (relayreq_ != NULL) relayreq_->::jsbn::protoc::RelayReq::Clear();
  clear_has_relayreq();
}
inline const ::jsbn::protoc::RelayReq& NetProtocol::relayreq() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.NetProtocol.relayReq)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return relayreq_ != NULL ? *relayreq_ : *default_instance().relayreq_;
#else
  return relayreq_ != NULL ? *relayreq_ : *default_instance_->relayreq_;
#endif
}
inline ::jsbn::protoc::RelayReq* NetProtocol::mutable_relayreq() {
  set_has_relayreq();
  if (relayreq_ == NULL) relayreq_ = new ::jsbn::protoc::RelayReq;
  // @@protoc_insertion_point(field_mutable:jsbn.protoc.NetProtocol.relayReq)
  return relayreq_;
}
inline ::jsbn::protoc::RelayReq* NetProtocol::release_relayreq() {
  clear_has_relayreq();
  ::jsbn::protoc::RelayReq* temp = relayreq_;
  relayreq_ = NULL;
  return temp;
}
inline void NetProtocol::set_allocated_relayreq(::jsbn::protoc::RelayReq* relayreq) {
  delete relayreq_;
  relayreq_ = relayreq;
  if (relayreq) {
    set_has_relayreq();
  } else {
    clear_has_relayreq();
  }
  // @@protoc_insertion_point(field_set_allocated:jsbn.protoc.NetProtocol.relayReq)
}

// optional .jsbn.protoc.RelayRsp relayRsp = 6;
inline bool NetProtocol::has_relayrsp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetProtocol::set_has_relayrsp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetProtocol::clear_has_relayrsp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetProtocol::clear_relayrsp() {
  if (relayrsp_ != NULL) relayrsp_->::jsbn::protoc::RelayRsp::Clear();
  clear_has_relayrsp();
}
inline const ::jsbn::protoc::RelayRsp& NetProtocol::relayrsp() const {
  // @@protoc_insertion_point(field_get:jsbn.protoc.NetProtocol.relayRsp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return relayrsp_ != NULL ? *relayrsp_ : *default_instance().relayrsp_;
#else
  return relayrsp_ != NULL ? *relayrsp_ : *default_instance_->relayrsp_;
#endif
}
inline ::jsbn::protoc::RelayRsp* NetProtocol::mutable_relayrsp() {
  set_has_relayrsp();
  if (relayrsp_ == NULL) relayrsp_ = new ::jsbn::protoc::RelayRsp;
  // @@protoc_insertion_point(field_mutable:jsbn.protoc.NetProtocol.relayRsp)
  return relayrsp_;
}
inline ::jsbn::protoc::RelayRsp* NetProtocol::release_relayrsp() {
  clear_has_relayrsp();
  ::jsbn::protoc::RelayRsp* temp = relayrsp_;
  relayrsp_ = NULL;
  return temp;
}
inline void NetProtocol::set_allocated_relayrsp(::jsbn::protoc::RelayRsp* relayrsp) {
  delete relayrsp_;
  relayrsp_ = relayrsp;
  if (relayrsp) {
    set_has_relayrsp();
  } else {
    clear_has_relayrsp();
  }
  // @@protoc_insertion_point(field_set_allocated:jsbn.protoc.NetProtocol.relayRsp)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoc
}  // namespace jsbn

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protoc_2eproto__INCLUDED
